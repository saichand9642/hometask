Continuous Delivery Plan
In this project, we follow a continuous delivery approach to streamline the deployment process. The workflow involves:

Docker Build: Each application is containerized using Docker, which allows for easy scaling and management in Kubernetes.
Push to Registry: Docker images are pushed to a container registry (e.g., Docker Hub, AWS ECR) to make them available for deployment in different environments.
Kubernetes Deployment: Kubernetes YAML manifests define the deployment and service configurations for each application, allowing for automated scaling, updates, and management.
CI/CD Integration: The deploy.sh script can be integrated into a CI/CD pipeline to automate the entire process of building, testing, and deploying the applications.
Tools and Rationale
Docker: Provides an efficient and portable way to containerize applications.
Kubernetes: Offers a powerful orchestration platform for managing and scaling containerized applications.
kubectl: Allows us to interact with the Kubernetes cluster for managing deployments, services, and resources.
Minikube: Used for local Kubernetes development and testing.
deploy.sh: Simplifies the deployment process by automating Docker image builds, pushing to the registry, and applying Kubernetes manifests.
